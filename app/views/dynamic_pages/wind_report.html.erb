<% provide(:title, @page.title) %>

<% content_for :active_energy do %>
  <ul class="quick-list">
    <li><i class="fa fa-flash"></i>Energy [kWh]:</br><span id="gauge-actual-watt-mpk"></span></li>
  </ul>
  <!-- <h2 style="text-align: center;"><b> Active Energy</b><br> -->
  <div style="text-align: center;">
      <canvas width="190" height="120" align="center" id="gaugewattmpk"></canvas>
      <div class="goal-wrapper">
         <span class="gauge-value pull-left"></span>
         <span id="gauge-text-watt-mpk" class="gauge-value pull-left"></span>
         <span id="goal-text-watt-mpk" class="goal-value pull-right" style="float: left;"></span>
         </br>
         <span style="font-weight: bold;text-align: center;display: block;">kWh</span>
      </div>
  </div>
<% end %>

<% content_for :wind_turbine_location do %>
  <!-- <ul class="quick-list">
    <li><i class="fa fa-flash"></i>Energy [kVAh]:</br><span id="gauge-actual-va-mpk"></span></li>
  </ul>
    <!-- <h2 style="text-align: center;"><b>Apparent Energy</b><br> -->
    <!-- <div style="text-align: center;">
      <canvas width="190" height="120" align="center" id="gaugevampk"></canvas>
      <div class="goal-wrapper">
        <span class="gauge-value pull-left"></span>
        <span id="gauge-text-va-mpk" class="gauge-value pull-left"></span>
        <span id="goal-text-va-mpk" class="goal-value pull-right" style="float: left;"></span>
        </br>
        <span style="font-weight: bold;text-align: center;display: block;">kVAh</span>
      </div>
    </div> --> 
    <div style="text-align: center;">
      <img src="/aeroge.jpeg" style="max-width: 78%;height: auto;padding-top: 10px;padding-right: 10px;padding-bottom: 10px;padding-left: 10px;">
      <h2 style="text-align: center;"><b>Block K UN</b><br>
    </div>
<% end %>

<% content_for :reactive_energy do %>
  <ul class="quick-list">
    
    <li><i class="fa fa-flash"></i>Energy[kVARh]:</br><span id="gauge-actual-var-mpk"></span></li>
  </ul>
    <!-- <h2 style="text-align: center;"><b>Reactive Energy</b><br> -->
    <div style="text-align: center;">
      <canvas width="190" height="120" align="center" id="gaugevarmpk"></canvas>
      <div class="goal-wrapper">
        <span class="gauge-value pull-left"></span>
        <span id="gauge-text-var-mpk" class="gauge-value pull-left"></span>
        <span id="goal-text-var-mpk" class="goal-value pull-right" style="float: left;"></span>
        </br>
        <span style="font-weight: bold;text-align: center;display: block;">kVARh</span>
      </div>
    </div>
<% end %>

<% content_for :power_report do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="powerMpkChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :power_factor_report do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="pfMpkChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :monthly_active_energy do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="mpkEnergyChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :weather_report do %>
  <div class="row">
    <div class="col-sm-12">
      <div class="temperature">
        <a id="fahrenheit" onclick="unitsTemperature(this)" href="javascript:void(0);"><span id="spanF">F</span></a>
        <a id="celsius" onclick="" href="javascript:void(0);"><span id="spanC" style="font-weight: bold">C</span></a>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-sm-4">
      <div class="weather-icon">
        <canvas height="84" width="84" id="partly-cloudy-day"></canvas>
      </div>
    </div>
    <div class="col-sm-8">
      <h1 id="temperature" style="text-align: right;"></h1>
    </div>
  </div>
  <div class="clearfix"></div>
  <div class="row weather-days">
    <div class="col-sm-3">
      <div class="daily-weather">
        <h2 class="day"><b>UV</b><br><small>[ Index ]</small></h2>
        <h3 class=" " id="uv_index" style="text-align: center;"></h3>
        <h2 style="font-size: 32px;"><i class="wi wi-hot centered-ico"></i></h2>
      </div>
    </div>
    <div class="col-sm-3">
      <div class="daily-weather">
        <h2 class="day"><b>Solar</b> <br><small>[ W/m<sup>2</sup> ]</small></h2>
        <h3 class=" " id="solar_radiation" style="text-align: center;"></h3>
        <canvas class="centered-canvas" id="clear-day" width="32" height="32"></canvas>
      </div>
    </div>
    <div class="col-sm-3">
      <div class="daily-weather">
        <h2 class="day"><b>Humidity</b> <br><small>[ % ]</small></h2>
        <h3 class=" " id="humidity" style="text-align: center;"></h3>
        <h2 style="font-size: 32px;"><i class="wi wi-raindrops centered-ico"></i></h2>
      </div>
    </div>
    <div class="col-sm-3">
      <div class="daily-weather">
        <h2 class="day"><b>Wind</b> <br><small>[ km/h ]</small></h2>
        <h3 class="" id=wind_speed style="text-align: center"></h3>
        <canvas class="centered-canvas" height="32" width="32" id="wind"></canvas>
      </div>
    </div>
    <div class="clearfix"></div>
  </div>
<% end %>

<% content_for :wind do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="windChart" height="225" width="500" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<%
=begin %>
<% content_for :voltage do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="voltageChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :energy do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="energyChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :panel_temperature do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="temperatureChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :panel_psh do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="radiationChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :wind_turbine_vibration do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="vibrationChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :vibration_fft do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="vibrationfreqChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<%
=end %>

<% content_for :page_scripts do %>
<script>
  $(document).ready(function() {
    var wind_chart = function (data) {
      labels = data.labels;
      var ctx = document.getElementById("windChart").getContext('2d');
      var source = {
        labels: labels,
        datasets: [{
          label: data[2].date,
          backgroundColor: "rgba(3, 88, 106, 0.2)",
          borderColor: "rgba(3, 88, 106, 0.80)",
          pointBorderColor: "rgba(3, 88, 106, 0.80)",
          pointBackgroundColor: "rgba(3, 88, 106, 0.80)",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          data: Object.values(data[2].result)
        },
        {
          label: data[1].date,
          backgroundColor: "rgba(38, 15, 154, 0.2)",
          borderColor: "rgba(38, 15, 154, 0.85)",
          pointColor: "rgba(38, 15, 154, 0.85)",
          pointStrokeColor: "#fff",
          pointHighlightFill: "#fff",
          pointHighlightStroke: "rgba(151,17,205,1)",
          data: Object.values(data[1].result)
        },
        {
          label: data[0].date,
          backgroundColor: "rgba(38, 155, 154, 0.2)",
          borderColor: "rgba(38, 155, 154, 0.85)",
          pointColor: "rgba(38, 155, 154, 0.85)",
          pointStrokeColor: "#fff",
          pointHighlightFill: "#fff",
          pointHighlightStroke: "rgba(151,187,205,1)",
          data: Object.values(data[0].result)
        }]
      };
      var canvasRadar = new Chart(ctx, {
        type: 'radar',
        data: source,
        option: {
          legend: {
            display: true
          },
          responsive: true,
          maintainAspectRatio: false
        }
      });
    }
    ajax_call("json", "wind_med1", '<%= wind_chart_path %>', wind_chart, false);
  });
</script>

<script>
$(document).ready(function() {
    var power_mpk_chart = function (data) {
      time = data.timestamp;
      x_data = data.x_data;
      y_data = data.y_data;
      z_data = data.z_data;
      k_data = data.k_data;
      var ctx = document.getElementById("powerMpkChart").getContext('2d');
      var lineData = {
        labels: time,
        datasets: [{
          label: 'Active [W]',
          backgroundColor: "rgba(236,190,20,0.40)",
          borderColor: "#ECBE14",
          pointBorderColor: "#ECBE14",
          pointBackgroundColor: "#ECBE14",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: x_data
          },
          {
          label: 'Apparent [VA]',
          backgroundColor: "rgba(242,143,63,0.40)",
          borderColor: "#F28F3F",
          pointBorderColor: "#F28F3F",
          pointBackgroundColor: "#F28F3F",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: y_data
          },
          {
          label: 'Reactive [VAR]',
          backgroundColor: "rgba(152,25,20,0.40)",
          borderColor: "#981914",
          pointBorderColor: "#981914",
          pointBackgroundColor: "#981914",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: z_data
          },
          {
          label: '100 W',
          backgroundColor: "transparent",
          borderColor: "#404040",
          pointBorderColor: "#404040",
          pointBackgroundColor: "#404040",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: k_data          
        }]
      };
      var ctx = document.getElementById("powerMpkChart").getContext('2d');
      var lineChart = new Chart(ctx, {
        type: 'line',
        data: lineData,
        options: {
          scales: {
            xAxes: [{
              type: 'time',
              time: {
                unit: 'hour',
                displayFormats: {
                  hour: 'HH:mm'
                },
                unitStepSize: 4,
                min: (moment().subtract(0, 'days').format("YYYY-MM-DD")).concat(" 00:00:00"),
                max: (moment().add(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00")
              },
              scaleLabel: {
                display: true,
                labelString: 'Time'
              }
            }],
            yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Magnitude'
              }
            }]
          },
          pan: {
            enabled: true,
            mode: 'xy'
          },
          zoom: {
            enabled: true,
            mode: 'xy',
            limits: {
              max: 10,
              min: 0.5
            }
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: true
          }
        }
      });
    }
    var pf_mpk_chart = function (data) {
      time = data.timestamp;
      x_data = data.x_data;
      var ctx = document.getElementById("pfMpkChart").getContext('2d');
      var lineData = {
        labels: time,
        datasets: [{
          label: 'Power Factor',
          backgroundColor: "rgba(236,190,20,0.40)",
          borderColor: "#ECBE14",
          pointBorderColor: "#ECBE14",
          pointBackgroundColor: "#ECBE14",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: x_data
          }]
      };
      var ctx = document.getElementById("pfMpkChart").getContext('2d');
      var lineChart = new Chart(ctx, {
        type: 'line',
        data: lineData,
        options: {
          scales: {
            xAxes: [{
              type: 'time',
              time: {
                unit: 'hour',
                displayFormats: {
                  hour: 'HH:mm'
                },
                unitStepSize: 4,
                min: (moment().subtract(0, 'days').format("YYYY-MM-DD")).concat(" 00:00:00"),
                max: (moment().add(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00")
              },
              scaleLabel: {
                display: true,
                labelString: 'Time'
              }
            }],
            yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Magnitude'
              }
            }]
          },
          pan: {
            enabled: true,
            mode: 'xy'
          },
          zoom: {
            enabled: true,
            mode: 'xy',
            limits: {
              max: 10,
              min: 0.5
            }
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: true
          }
        }
      });
    }
    var monthly_mpk_energy_chart = function (data) {
      time = data.months;
      y_data = data.y_data;
      var ctx2 = document.getElementById("mpkEnergyChart").getContext('2d');
      var barChartData = {
        labels: time,
        datasets: [{
          label: 'Energy delivered',
          backgroundColor: "#03586A",
          data: y_data
        }]
      };
      var barChart = new Chart(ctx2, {
        type: 'bar',
        data: barChartData,
        options: {
          tooltips: {
            mode: 'label'
          },
          scales: {
            xAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Month'
              }
            }],
            yAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Energy [kWh]'
              }
            }]
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: false
          }
        }
      });
    }
    ajax_call("json", "power_watt_mpk", '<%= power_mpk_chart_path %>', power_mpk_chart, false);
    ajax_call("json", "power_va_mpk", '<%= power_mpk_chart_path %>', power_mpk_chart, false);
    ajax_call("json", "power_var_mpk", '<%= power_mpk_chart_path %>', power_mpk_chart, false);
    ajax_call("json", "energy_watt_mpk", '<%= monthly_mpk_energy_chart_path %>', monthly_mpk_energy_chart, false);
    ajax_call("json", "pf_mpk", '<%= pf_mpk_chart_path %>', pf_mpk_chart, false);
});
</script>

<!-- Temperature Units Change -->
<script>
current_unit = "celsius";
var temp_before, temp_after;
function unitsTemperature(element){
  if(element.id == "celsius")
  {
    if(current_unit == "fahrenheit")
    {
      temp_before = parseFloat(($("h1#temperature").text()).split("°")[0]);
      temp_after = (temp_before - 32) * 5/9;
      var newtext = "".concat(temp_after.toFixed(2),"°");
      document.getElementById("temperature").innerHTML = newtext;
      $("#".concat(element.id)).attr("onclick","");
      $("#fahrenheit").attr("onclick","unitsTemperature(this)");
      $("#spanC").css("font-weight","bold");
      $("#spanF").css("font-weight","normal");
      current_unit = "celsius";
    }
  }
  else if (element.id == "fahrenheit")
  {
    if(current_unit == "celsius")
    {
      temp_before = parseFloat(($("h1#temperature").text()).split("°")[0]);
      temp_after = temp_before*9/5 + 32;
      var newtext = "".concat(temp_after.toFixed(2),"°");
      document.getElementById("temperature").innerHTML = newtext;
      $("#".concat(element.id)).attr("onclick","");
      $("#celsius").attr("onclick","unitsTemperature(this)");
      $("#spanC").css("font-weight","normal");
      $("#spanF").css("font-weight","bold");
      current_unit = "fahrenheit";
    }
  }
  else
  {
    return;
  }
}
</script>
<!--/Temperature Units Change -->

<!-- Skycons -->
<script>
  $(document).ready(function() {
    var icons = new Skycons({
        "color": "#73879C"
      }),
      list = [
        "clear-day", "clear-night", "partly-cloudy-day",
        "partly-cloudy-night", "cloudy", "rain", "sleet", "snow", "wind",
        "fog"
      ],
      i;
    for (i = list.length; i--;)
      icons.set(list[i], list[i]);
    icons.play();
  });
</script>
<!-- /Skycons -->

<script>
  function ShowWeather() {
    var load_metereological = function (data) {
      variable = data.variable;
      result = data.result;
      if (variable == "timestamp"){
        document.getElementById("subtitle_weather_report").innerHTML = result;
      }else{
        if (variable == "temperature"){
          if ($("#spanF").css("font-weight")  == 'bold' || $("#spanF").css("font-weight")  == '700'){
            result = result*9/5 + 32;
            result = Math.round(result*100)/100;
          }
          result = result + '°';
        }
        document.getElementById(variable).innerHTML = result;
      }
    }
    ajax_call("json", "timestamp", '<%= load_metereological_path %>', load_metereological, false);
    ajax_call("json", "temperature", '<%= load_metereological_path %>', load_metereological, true);
    ajax_call("json", "uv_index", '<%= load_metereological_path %>', load_metereological, true);
    ajax_call("json", "solar_radiation", '<%= load_metereological_path %>', load_metereological, true);
    ajax_call("json", "humidity", '<%= load_metereological_path %>', load_metereological, true);
    ajax_call("json", "wind_speed", '<%= load_metereological_path %>', load_metereological, true);
  }

  function ShowEnergiesMpk() {
    var load_energies_mpk = function (data) {
      variable = data.variable;
      result = data.result;
      timestamp = data.timestamp;
      if (variable == "energy_watt_mpk") {
        gaugewattmpk.maxValue = parseFloat(300);
        gaugewattmpk.set(parseFloat(result));
      } else if (variable == "energy_va_mpk") {
        gaugevampk.maxValue = parseFloat(300);
        gaugevampk.set(parseFloat(result));
      } else if (variable == "energy_var_mpk") {
        gaugevarmpk.maxValue = parseFloat(300);
        gaugevarmpk.set(parseFloat(result));
      } else if (variable == "monthly_active_energy") {
        timestamp = data.timestamp;
        document.getElementById(variable).innerHTML = parseFloat(result).toFixed(1) + ['kWh'];
        document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
      } else if (variable == "total_delivered_energy") {
        timestamp = data.timestamp;
        document.getElementById(variable).innerHTML = parseFloat(result).toFixed(1) + ['kWh'];
        document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
      } else if (variable == "historic_pf") {
        timestamp = data.timestamp;
        document.getElementById(variable).innerHTML = parseFloat(result).toFixed(1) + ['%'];
        document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
      } else if (variable == "timestamp" ){
        document.getElementById("subtitle_active_energy").innerHTML = "Last month";
        document.getElementById("subtitle_reactive_energy").innerHTML = "Last month";
        document.getElementById("subtitle_apparent_energy").innerHTML = "Last month";
      } else {
        document.getElementById(variable).innerHTML = result;
        document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
      }
    }
    ajax_call("json", "energy_watt_mpk", '<%= load_energies_mpk_path %>', load_energies_mpk, true);
    ajax_call("json", "energy_va_mpk", '<%= load_energies_mpk_path %>', load_energies_mpk, true);
    ajax_call("json", "energy_var_mpk", '<%= load_energies_mpk_path %>', load_energies_mpk, true);
    ajax_call("json", "total_delivered_energy", '<%= load_energies_mpk_path %>', load_energies_mpk, true);
    ajax_call("json", "monthly_active_energy", '<%= load_energies_mpk_path %>', load_energies_mpk, true);
    ajax_call("json", "historic_pf", '<%= load_energies_mpk_path %>', load_energies_mpk, true);
    ajax_call("json", "last_update", '<%= load_energies_mpk_path %>', load_energies_mpk, false);
    ajax_call("json", "timestamp", '<%= load_energies_mpk_path %>', load_energies_mpk, false);
  }

  $(document).ready(function() {
    var optwatt = {
        lines: 12,
        angle: 0,
        lineWidth: 0.4,
        pointer: {
            length: 0.75,
            strokeWidth: 0.042,
            color: '#1D212A'
        },
        limitMax: 'false',
        colorStart: '#ECBE14',
        colorStop: '#ECBE14',
        strokeColor: '#F0F3F3',
        generateGradient: true
    };
    var optva = {
        lines: 12,
        angle: 0,
        lineWidth: 0.4,
        pointer: {
            length: 0.75,
            strokeWidth: 0.042,
            color: '#1D212A'
        },
        limitMax: 'false',
        colorStart: '#F28F3F',
        colorStop: '#F28F3F',
        strokeColor: '#F0F3F3',
        generateGradient: true
    };
    var optvar = {
        lines: 12,
        angle: 0,
        lineWidth: 0.4,
        pointer: {
            length: 0.75,
            strokeWidth: 0.042,
            color: '#1D212A'
        },
        limitMax: 'false',
        colorStart: '#981914',
        colorStop: '#981914',
        strokeColor: '#F0F3F3',
        generateGradient: true
    };
    var targetwatt = document.getElementById('gaugewattmpk');
    gaugewattmpk = new Gauge(targetwatt).setOptions(optwatt);
    document.getElementById("gaugewattmpk").removeAttribute("style");
    gaugewattmpk.animationSpeed = 32;
    gaugewattmpk.setTextField(document.getElementById("gauge-actual-watt-mpk"));

    var targetva = document.getElementById('gaugevampk');
    gaugevampk = new Gauge(targetva).setOptions(optva);
    document.getElementById("gaugevampk").removeAttribute("style");
    gaugevampk.animationSpeed = 32;
    gaugevampk.setTextField(document.getElementById("gauge-actual-va-mpk"));

    var targetvar = document.getElementById('gaugevarmpk');
    gaugevarmpk = new Gauge(targetvar).setOptions(optvar);
    document.getElementById("gaugevarmpk").removeAttribute("style");
    gaugevarmpk.animationSpeed = 32;
    gaugevarmpk.setTextField(document.getElementById("gauge-actual-var-mpk"));
    ShowWeather();
    ShowEnergiesMpk();
    setInterval(function() {
        ShowWeather();
        ShowEnergiesMpk();
    }, 60000);
  });
</script>
<%
=begin %>

<script>
  $(document).ready(function() {
    var voltage_chart = function (data) {
      time = data.timestamp;
      y_data = data.y_data;
      var lineData = {
        labels: time,
        datasets: [{
          label: 'Voltage',
          backgroundColor: "rgba(38, 185, 154, 0.31)",
          borderColor: "rgba(38, 185, 154, 0.7)",
          pointBorderColor: "rgba(38, 185, 154, 0.7)",
          pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 1,
          cubicInterpolationMode: 'default',
          data: y_data
        }]
      };
      var ctx = document.getElementById("voltageChart").getContext('2d');
      var lineChart = new Chart(ctx, {
        type: 'line',
        data: lineData,
        options: {
          scales: {
            xAxes: [{
              type: 'time',
              time: {
                unit: 'hour',
                displayFormats: {
                  hour: 'HH:mm'
                },
                unitStepSize: 4,
                min: (moment().subtract(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00"),
                max: (moment().add(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00")
              },
              scaleLabel: {
                display: true,
                labelString: 'Time'
              }
            }],
            yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Voltage [V]'
              }
            }]
          },
          pan: {
            enabled: true,
            mode: 'xy'
          },
          zoom: {
            enabled: true,
            mode: 'xy',
            limits: {
              max: 10,
              min: 0.5
            }
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: false
          }
        }
      });
    }

    var energy_chart = function (data) {
      time = data.months;
      y_data = data.y_data;
      var ctx2 = document.getElementById("energyChart").getContext('2d');
      var barChartData = {
        labels: time,
        datasets: [{
          label: 'Energy delivered',
          backgroundColor: "#03586A",
          data: y_data
        }]
      };
      var barChart = new Chart(ctx2, {
        type: 'bar',
        data: barChartData,
        options: {
          tooltips: {
            mode: 'label'
          },
          scales: {
            xAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Month'
              }
            }],
            yAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Energy [kWh]'
              }
            }]
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: false
          }
        }
      });
    }

    var temperature_chart = function (data) {
      time = data.timestamp;
      y_data = data.y_data;
      var lineData = {
        labels: time,
        datasets: [{
          label: 'Voltage',
          backgroundColor: "rgba(38, 185, 154, 0.31)",
          borderColor: "rgba(38, 185, 154, 0.7)",
          pointBorderColor: "rgba(38, 185, 154, 0.7)",
          pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 1,
          cubicInterpolationMode: 'default',
          data: y_data
        }]
      };
      var ctx = document.getElementById("temperatureChart").getContext('2d');
      var lineChart = new Chart(ctx, {
        type: 'line',
        data: lineData,
        options: {
          scales: {
            xAxes: [{
              type: 'time',
              time: {
                unit: 'hour',
                displayFormats: {
                  hour: 'HH:mm'
                },
                unitStepSize: 4,
                min: (moment().subtract(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00"),
                max: (moment().add(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00")
              },
              scaleLabel: {
                display: true,
                labelString: 'Time'
              }
            }],
            yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Temperature [°C]'
              }
            }]
          },
          pan: {
            enabled: true,
            mode: 'xy'
          },
          zoom: {
            enabled: true,
            mode: 'xy',
            limits: {
              max: 10,
              min: 0.5
            }
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: false
          }
        }
      });
    }

    var radiation_chart = function (data) {
      labels = data.labels;
      values = data.values;
      var ctx = document.getElementById("radiationChart").getContext('2d');

      var format_data = {
        labels: labels,
        datasets: [{
          label: 'HSP',
          backgroundColor: "#249FB4",
          data: values
        }]
      };

      var barChartSol = new Chart(ctx, {
        type: 'bar',
        data: format_data,
        options: {
          tooltips: {
            mode: 'label'
          },
          scales: {
            xAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Days'
              }
            }],
            yAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'HSP [kWh/m\xB2/d]'
              }
          }]
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: false
          }
        }
      });
    }

    var vibration_chart = function (data) {
      time = data.timestamp;
      x_data = data.x_data;
      y_data = data.y_data;
      z_data = data.z_data;
      var ctx = document.getElementById("vibrationChart").getContext('2d');
      var lineData = {
        labels: time,
        datasets: [{
          label: 'X Axis',
          backgroundColor: "transparent",
          borderColor: "#ECBE14",
          pointBorderColor: "#ECBE14",
          pointBackgroundColor: "#ECBE14",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: x_data
          },
          {
          label: 'Y Axis',
          backgroundColor: "transparent",
          borderColor: "#F28F3F",
          pointBorderColor: "#F28F3F",
          pointBackgroundColor: "#F28F3F",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: y_data
          },
          {
          label: 'Z Axis',
          backgroundColor: "transparent",
          borderColor: "#981914",
          pointBorderColor: "#981914",
          pointBackgroundColor: "#981914",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: z_data          }]
      };
      var ctx = document.getElementById("vibrationChart").getContext('2d');
      var lineChart = new Chart(ctx, {
        type: 'line',
        data: lineData,
        options: {
          scales: {
            xAxes: [{
              type: 'time',
              time: {
                unit: 'hour',
                displayFormats: {
                  hour: 'HH:mm'
                },
                unitStepSize: 4,
                min: (moment().subtract(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00"),
                max: (moment().add(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00")
              },
              scaleLabel: {
                display: true,
                labelString: 'Time'
              }
            }],
            yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Position [g]'
              }
            }]
          },
          pan: {
            enabled: true,
            mode: 'xy'
          },
          zoom: {
            enabled: true,
            mode: 'xy',
            limits: {
              max: 10,
              min: 0.5
            }
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: true
          }
        }
      });
    }

    var vibration_freq_chart = function (data) {
      ejey_data = data.ejey_data; //freq
      x_data = data.x_data;
      y_data = data.y_data;
      z_data = data.z_data;
      var ctx = document.getElementById("vibrationfreqChart").getContext('2d');
      var lineData = {
        labels: ejey_data,
        datasets: [{
          label: '|X|',
          backgroundColor: "transparent",
          borderColor: "#ECBE14",
          pointBorderColor: "#ECBE14",
          pointBackgroundColor: "#ECBE14",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: x_data
          },
          {
          label: '|Y|',
          backgroundColor: "transparent",
          borderColor: "#F28F3F",
          pointBorderColor: "#F28F3F",
          pointBackgroundColor: "#F28F3F",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: y_data
          },
          {
          label: '|Z|',
          backgroundColor: "transparent",
          borderColor: "#981914",
          pointBorderColor: "#981914",
          pointBackgroundColor: "#981914",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: z_data}
        ]
      };
      var ctx = document.getElementById("vibrationfreqChart").getContext('2d');
      var lineChart = new Chart(ctx, {
        type: 'line',
        data: lineData,
        options: {
          scales: {
            xAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Frequency [Hz]'
              }
            }],
            yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Magnitude'
              }
            }]
          },
          pan: {
            enabled: true,
            mode: 'xy'
          },
          zoom: {
            enabled: true,
            mode: 'xy',
            limits: {
              max: 10,
              min: 0.5
            }
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: true
          }
        }
      });
    }

    ajax_call("json", "m_ejex", '<%= vibration_chart_path %>', vibration_chart, false);
    ajax_call("json", "m_ejey", '<%= vibration_chart_path %>', vibration_chart, false);
    ajax_call("json", "m_ejez", '<%= vibration_chart_path %>', vibration_chart, false);

    ajax_call("json", "mag", '<%= vibration_freq_chart_path %>', vibration_freq_chart, false);
    ajax_call("json", "mag_y", '<%= vibration_freq_chart_path %>', vibration_freq_chart, false);
    ajax_call("json", "mag_z", '<%= vibration_freq_chart_path %>', vibration_freq_chart, false);
    ajax_call("json", "freq", '<%= vibration_freq_chart_path %>', vibration_freq_chart, false);

    ajax_call("json", "voltage_med1", '<%= voltage_chart_path %>', voltage_chart, false);
    ajax_call("json", "energy_med1", '<%= energy_chart_path %>', energy_chart, false);
    ajax_call("json", "temperature", '<%= temperature_chart_path %>', temperature_chart, false);
    ajax_call("json", "radiation", '<%= radiation_chart_path %>', radiation_chart, false);

  });
</script>

<%
=end %>
<% end %>
<%= render @page %>

<% provide(:title, @page.title) %>

<% content_for :active_energy do %>
  <ul class="quick-list">
    <li><i class="fa fa-flash"></i>Energy [kWh]:</br><span id="gauge-actual-watt"></span></li>
  </ul>
  <!-- <h2 style="text-align: center;"><b> Active Energy</b><br> -->
  <div style="text-align: center;">
      <canvas width="190" height="120" align="center" id="gaugewatt"></canvas>
      <div class="goal-wrapper">
         <span class="gauge-value pull-left"></span>
         <span id="gauge-text-watt" class="gauge-value pull-left"></span>
         <span id="goal-text-watt" class="goal-value pull-right" style="float: left;"></span>
         </br>
         <span style="font-weight: bold;text-align: center;display: block;">kWh</span>
      </div>
  </div>
<% end %>

<% content_for :solar_panels_location do %>
  <!-- <ul class="quick-list">
    <li><i class="fa fa-flash"></i>Energy [kVAh]:</br><span id="gauge-actual-va"></span></li>
  </ul> -->
    <!-- <h2 style="text-align: center;"><b>Apparent Energy</b><br> -->
    <!-- <div style="text-align: center;">
      <canvas width="190" height="120" align="center" id="gaugeva"></canvas>
      <div class="goal-wrapper">
        <span class="gauge-value pull-left"></span>
        <span id="gauge-text-va" class="gauge-value pull-left"></span>
        <span id="goal-text-va" class="goal-value pull-right" style="float: left;"></span>
        </br>
        <span style="font-weight: bold;text-align: center;display: block;">kVAh</span>
      </div>
    </div> -->
    <div style="text-align: center;">
      <img src="/panels.jpeg" style="max-width: 78%;height: auto;padding-top: 10px;padding-right: 10px;padding-bottom: 10px;padding-left: 10px;">
      <h2 style="text-align: center;"><b>Parking Lot 10 UN</b><br>
    </div>
<% end %>

<% content_for :reactive_energy do %>
  <ul class="quick-list">
    
    <li><i class="fa fa-flash"></i>Energy[kVARh]:</br><span id="gauge-actual-var"></span></li>
  </ul>
    <!-- <h2 style="text-align: center;"><b>Reactive Energy</b><br> -->
    <div style="text-align: center;">
      <canvas width="190" height="120" align="center" id="gaugevar"></canvas>
      <div class="goal-wrapper">
        <span class="gauge-value pull-left"></span>
        <span id="gauge-text-var" class="gauge-value pull-left"></span>
        <span id="goal-text-var" class="goal-value pull-right" style="float: left;"></span>
        </br>
        <span style="font-weight: bold;text-align: center;display: block;">kVARh</span>
      </div>
    </div>
<% end %>

<% content_for :power_report do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="powerChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :monthly_active_energy do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="panelsEnergyChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :psh do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="hspChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<%
=begin %>
<% content_for :electrical_variables do %>
  <ul class="quick-list">
    <li><i class="fa fa-power-off"></i>Voltage: </br><span id="voltage_med1"></span></li></br>
    <li><i class="fa fa-flash"></i> Power: </br><span id="power_med1"></span></li></br>
    <li><span aria-hidden="true" data-icon="Φ" style="padding-right:10px;color:#757679;font-size: 18px;font-weight: 400;"></span>PF: </br><span id="pf_med1"></span></li></br>
    <li><i class="fa fa-battery-4"></i>Battery 1: </br>
      <div class="progress progress-striped active" style="margin-bottom: 0px;">
        <div id="voltage_batt1" class="progress-bar" style="width: 0%; background-color: #1ABC9C;">
        </div>
      </div>
    </li></br>
    <li><i class="fa fa-battery-4"></i>Battery 2: </br>
      <div class="progress progress-striped active" style="margin-bottom: 0px;">
        <div id="voltage_batt2" class="progress-bar" style="width: 0%; background-color: #1ABC9C;">
        </div>
      </div>
    </li></br>
  </ul>
  <div class="sidebar-widget" style="margin-top:0; width=100%; height=100%">
    <h4>Energy Delivered <br> (This Month)</h4>
    <canvas id="gauge"></canvas>
    <div class="goal-wrapper">
      <span class="gauge-value pull-left"></span>
      <span id="gauge-text" class="gauge-value pull-left"></span>
      <span id="goal-text" class="goal-value pull-right" style="float: left;"></span>
      </br>
      <span style="font-weight: bold;text-align: center;display: block;">kWh</span>
    </div>
  </div>
<% end %>

<% content_for :location do %>
  <div id="map"></div>
<% end %>

<% content_for :weather_report do %>
  <div class="row">
    <div class="col-sm-12">
      <div class="temperature">
        <a id="fahrenheit" onclick="unitsTemperature(this)" href="javascript:void(0);"><span id="spanF">F</span></a>
        <a id="celsius" onclick="" href="javascript:void(0);"><span id="spanC" style="font-weight: bold">C</span></a>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-sm-4">
      <div class="weather-icon">
        <canvas height="84" width="84" id="partly-cloudy-day"></canvas>
      </div>
    </div>
    <div class="col-sm-8">
      <h1 id="temperature" style="text-align: right;"></h1>
    </div>
  </div>
  <div class="clearfix"></div>
  <div class="row weather-days">
    <div class="col-sm-3">
      <div class="daily-weather">
        <h2 class="day"><b>UV</b><br><small>[ Index ]</small></h2>
        <h3 class=" " id="uv_index" style="text-align: center;"></h3>
        <h2 style="font-size: 32px;"><i class="wi wi-hot centered-ico"></i></h2>
      </div>
    </div>
    <div class="col-sm-3">
      <div class="daily-weather">
        <h2 class="day"><b>Solar</b> <br><small>[ W/m<sup>2</sup> ]</small></h2>
        <h3 class=" " id="solar_radiation" style="text-align: center;"></h3>
        <canvas class="centered-canvas" id="clear-day" width="32" height="32"></canvas>
      </div>
    </div>
    <div class="col-sm-3">
      <div class="daily-weather">
        <h2 class="day"><b>Humidity</b> <br><small>[ % ]</small></h2>
        <h3 class=" " id="humidity" style="text-align: center;"></h3>
        <h2 style="font-size: 32px;"><i class="wi wi-raindrops centered-ico"></i></h2>
      </div>
    </div>
    <div class="col-sm-3">
      <div class="daily-weather">
        <h2 class="day"><b>Wind</b> <br><small>[ km/h ]</small></h2>
        <h3 class="" id=wind_speed style="text-align: center"></h3>
        <canvas class="centered-canvas" height="32" width="32" id="wind"></canvas>
      </div>
    </div>
    <div class="clearfix"></div>
  </div>
<% end %>

<% content_for :control_panel do %>
  <div class="">
    <label>
      <input id= "xantrex" class="js-switch js-check-click" style="display:none:" data-switchery="true" type="checkbox"/> Inversor Xantrex
   </label>
  </div>
  <div class="">
    <label>
      <input id= "batt1" class="js-switch js-check-click" style="display:none:" data-switchery="true" type="checkbox"/> Baterias 1
    </label>
  </div>
  <div class="">
    <label>
      <input id= "batt2" class="js-switch js-check-click" style="display:none:" data-switchery="true" type="checkbox"/> Baterias 2
    </label>
  </div>
<% end %>

<% content_for :panel_conditions do %>
  <div class="col-sm-4">
      <div class="daily-weather">
        <h2 class="day"><b>Solar Radiation</b> <br><small>[ W/m<sup>2</sup> ]</small></h2>
        <h3 class=" " id="radiation_panel" style="text-align: center;"></h3>
        <h2 style="font-size: 32px;"><i class="wi wi-horizon-alt centered-ico"></i></h2>
      </div>
    </div>
    <div class="col-sm-4">
      <div class="daily-weather">
        <h2 class="day"><b>Panel Temperature</b> <br><small>[°C ]</small></h2>
        <h3 class=" " id="panel_temp" style="text-align: center;"></h3>
        <h2 style="font-size: 32px;"><i class="wi wi-thermometer centered-ico"></i></h2>
      </div>
    </div>
    <div class="col-sm-4">
      <div class="daily-weather">
        <h2 class="day"><b>Room Temperature</b> <br><small>[°C ]</small></h2>
        <h3 class="" id="ext_temp" style="text-align: center"></h3>
        <h2 style="font-size: 32px;"><i class="wi wi-thermometer-exterior centered-ico"></i></h2>
      </div>
    </div>
    <div class="clearfix"></div>
  </div>
<% end %>

<% content_for :speed_report do %>
  <div class="row weather-days">
    <div class="col-sm-4">
      <div class="daily-weather">
        <h2 style="font-size: 32px;"><i class="wi wi-cloudy-gusts centered-ico"></i></h2>
        <h3 style="text-align: center;"></h3>
      </div>
    </div>
    <div class="col-sm-8">
      <div class="daily-weather">
        <h2 style="text-align: center;"><b>Speed</b><br><small id="gauge-actual-speed" style="text-align: center;">[]</small></h2>
      </div>
    </div>
  </div>
    <canvas id="gaugespeed"></canvas>
  <div class="goal-wrapper">
    <span class="gauge-value pull-left"></span>
    <span id="gauge-text-speed" class="gauge-value pull-left"></span>
    <span id="goal-text-speed" class="goal-value pull-right" style="float: left;"></span>
    </br>
    <span style="font-weight: bold;text-align: center;display: block;">rpm</span>
  </div>
<% end %>

<% content_for :wind_turbine_speed do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="speedChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :wind do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="windChart" height="225" width="425" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<% content_for :psh do %>
  <div class="demo-container resize_chart" style="height:280px">
    <canvas id="hspChart" class="chartjs-responsive"></canvas>
  </div>
<% end %>

<%
=end %>

<% content_for :page_scripts do %>
<script>
$(document).ready(function() {
    var power_chart = function (data) {
      time = data.timestamp;
      x_data = data.x_data;
      y_data = data.y_data;
      z_data = data.z_data;
      var ctx = document.getElementById("powerChart").getContext('2d');
      var lineData = {
        labels: time,
        datasets: [{
          label: 'Active [kW]',
          backgroundColor: "rgba(236,190,20,0.40)",
          borderColor: "#ECBE14",
          pointBorderColor: "#ECBE14",
          pointBackgroundColor: "#ECBE14",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: x_data
          },
          {
          label: 'Apparent [kVA]',
          backgroundColor: "rgba(242,143,63,0.40)",
          borderColor: "#F28F3F",
          pointBorderColor: "#F28F3F",
          pointBackgroundColor: "#F28F3F",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: y_data
          },
          {
          label: 'Reactive [kVAR]',
          backgroundColor: "rgba(152,25,20,0.40)",
          borderColor: "#981914",
          pointBorderColor: "#981914",
          pointBackgroundColor: "#981914",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          linetension: 0,
          data: z_data          }]
      };
      var ctx = document.getElementById("powerChart").getContext('2d');
      var lineChart = new Chart(ctx, {
        type: 'line',
        data: lineData,
        options: {
          scales: {
            xAxes: [{
              type: 'time',
              time: {
                unit: 'hour',
                displayFormats: {
                  hour: 'HH:mm'
                },
                unitStepSize: 4,
                min: (moment().subtract(0, 'days').format("YYYY-MM-DD")).concat(" 00:00:00"),
                max: (moment().add(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00")
              },
              scaleLabel: {
                display: true,
                labelString: 'Time'
              }
            }],
            yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Magnitude'
              }
            }]
          },
          pan: {
            enabled: true,
            mode: 'xy'
          },
          zoom: {
            enabled: true,
            mode: 'xy',
            limits: {
              max: 10,
              min: 0.5
            }
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: true
          }
        }
      });
    }
    var monthly_panels_energy_chart = function (data) {
      time = data.months;
      y_data = data.y_data;
      var ctx2 = document.getElementById("panelsEnergyChart").getContext('2d');
      var barChartData = {
        labels: time,
        datasets: [{
          label: 'Energy delivered',
          backgroundColor: "#03586A",
          data: y_data
        }]
      };
      var barChart = new Chart(ctx2, {
        type: 'bar',
        data: barChartData,
        options: {
          tooltips: {
            mode: 'label'
          },
          scales: {
            xAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Month'
              }
            }],
            yAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Energy [kWh]'
              }
            }]
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: false
          }
        }
      });
    }
    var hsp_chart = function (data) {
      labels = data.labels;
      values = data.values;
      var ctx = document.getElementById("hspChart").getContext('2d');

      var format_data = {
        labels: labels,
        datasets: [{
          label: 'HSP',
          backgroundColor: "#249FB4",
          data: values
        }]
      };

      var barChartSol = new Chart(ctx, {
        type: 'bar',
        data: format_data,
        options: {
          tooltips: {
            mode: 'label'
          },
          scales: {
            xAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Days'
              }
            }],
            yAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'HSP [kWh/m\xB2/d]'
              }
          }]
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: false
          }
        }
      });
    }
    ajax_call("json", "energy_watt", '<%= monthly_panels_energy_chart_path %>', monthly_panels_energy_chart, false);
    ajax_call("json", "power_watt", '<%= power_chart_path %>', power_chart, false);
    ajax_call("json", "power_va", '<%= power_chart_path %>', power_chart, false);
    ajax_call("json", "power_var", '<%= power_chart_path %>', power_chart, false);
    ajax_call("json", "hsp", '<%= hsp_chart_path %>', hsp_chart, false);
});
</script>

<script>
function ShowTilesEnergies() {
  var load_active_energy = function (data) {
    variable = data.variable;
    result = data.result;
    if (variable == "monthly_active_energy"){
      timestamp = data.timestamp;
      document.getElementById(variable).innerHTML = parseFloat(result).toFixed(1) + ['k'];
      document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
    }
  }
  ajax_call("json", "energy_watt", '<%= load_active_energy_path %>', load_active_energy, true);
  ajax_call("json", "monthly_active_energy", '<%= load_active_energy_path %>', load_active_energy, true);
  ajax_call("json", "timestamp", '<%= load_active_energy_path %>', load_active_energy, false);
}

function ShowEnergies() {
  var load_energies = function (data) {
    variable = data.variable;
    result = data.result;
    timestamp = data.timestamp;
    if (variable == "energy_watt") {
      gaugewatt.maxValue = parseFloat(1500);
      gaugewatt.set(parseFloat(result));
    } else if (variable == "energy_va") {
      gaugeva.maxValue = parseFloat(1500);
      gaugeva.set(parseFloat(result));
    } else if (variable == "energy_var") {
      gaugevar.maxValue = parseFloat(1500);
      gaugevar.set(parseFloat(result));
    } else if (variable == "total_delivered_energy") {
      timestamp = data.timestamp;
      document.getElementById(variable).innerHTML = parseFloat(result).toFixed(1) + ['MWh'];
      document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
    } else if (variable == "monthly_active_energy") {
      timestamp = data.timestamp;
      document.getElementById(variable).innerHTML = parseFloat(result).toFixed(1) + ['kWh'];
      document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
    } else if (variable == "timestamp" ){
      document.getElementById("subtitle_active_energy").innerHTML = "Last month";
      document.getElementById("subtitle_reactive_energy").innerHTML = "Last month";
      document.getElementById("subtitle_apparent_energy").innerHTML = "Last month";
    } else {
      document.getElementById(variable).innerHTML = result;
      document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
    }
  }
  ajax_call("json", "energy_watt", '<%= load_energies_path %>', load_energies, true);
  ajax_call("json", "energy_va", '<%= load_energies_path %>', load_energies, true);
  ajax_call("json", "energy_var", '<%= load_energies_path %>', load_energies, true);
  ajax_call("json", "total_delivered_energy", '<%= load_energies_path %>', load_energies, true);
  ajax_call("json", "monthly_active_energy", '<%= load_energies_path %>', load_energies, true);
  ajax_call("json", "last_update", '<%= load_energies_path %>', load_energies, false);
  ajax_call("json", "timestamp", '<%= load_energies_path %>', load_energies, false);
}

$(document).ready(function() {
    var optwatt = {
        lines: 12,
        angle: 0,
        lineWidth: 0.4,
        pointer: {
            length: 0.75,
            strokeWidth: 0.042,
            color: '#1D212A'
        },
        limitMax: 'false',
        colorStart: '#ECBE14',
        colorStop: '#ECBE14',
        strokeColor: '#F0F3F3',
        generateGradient: true
    };
    var optva = {
        lines: 12,
        angle: 0,
        lineWidth: 0.4,
        pointer: {
            length: 0.75,
            strokeWidth: 0.042,
            color: '#1D212A'
        },
        limitMax: 'false',
        colorStart: '#F28F3F',
        colorStop: '#F28F3F',
        strokeColor: '#F0F3F3',
        generateGradient: true
    };
    var optvar = {
        lines: 12,
        angle: 0,
        lineWidth: 0.4,
        pointer: {
            length: 0.75,
            strokeWidth: 0.042,
            color: '#1D212A'
        },
        limitMax: 'false',
        colorStart: '#981914',
        colorStop: '#981914',
        strokeColor: '#F0F3F3',
        generateGradient: true
    };
    var targetwatt = document.getElementById('gaugewatt');
    gaugewatt = new Gauge(targetwatt).setOptions(optwatt);
    document.getElementById("gaugewatt").removeAttribute("style");
    gaugewatt.animationSpeed = 32;
    gaugewatt.setTextField(document.getElementById("gauge-actual-watt"));

    var targetva = document.getElementById('gaugeva');
    gaugeva = new Gauge(targetva).setOptions(optva);
    document.getElementById("gaugeva").removeAttribute("style");
    gaugeva.animationSpeed = 32;
    gaugeva.setTextField(document.getElementById("gauge-actual-va"));

    var targetvar = document.getElementById('gaugevar');
    gaugevar = new Gauge(targetvar).setOptions(optvar);
    document.getElementById("gaugevar").removeAttribute("style");
    gaugevar.animationSpeed = 32;
    gaugevar.setTextField(document.getElementById("gauge-actual-var"));
    
    $('#gauge').css("width", "100%");
    ShowEnergies();
    ShowTilesEnergies();
    setInterval(function() {
      ShowEnergies();
      ShowTilesEnergies();
    }, 60000);
});
</script>

<%
=begin %>
<!--Google Maps API -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBemXPT9yR9ExhHqV3ZxpNdUbEjRuLctPo&libraries=places"></script>
<script type="text/javascript">
  function initMap() {
    var myLatLng = {lat: 11.020121, lng: -74.851302};
    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 12,
      center: {lat: 11.020121, lng: -74.851302},
    });
    var iconBase = '/images/';
    var station = {
      url: iconBase + 'marker.png',
      scaledSize: new google.maps.Size(32, 32),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(16, 16)
    };
    var marker = new google.maps.Marker({
      position: myLatLng,
      icon: station,
      map: map,
      title: 'Uninorte km5 - Bloque K - Mapuka'
    });
    marker.setMap(map);
  }
  google.maps.event.addDomListener(window, "load", initMap);
</script>
<!--/Google Maps API -->
<!-- Temperature Units Change -->
<script>
current_unit = "celsius";
var temp_before, temp_after;
function unitsTemperature(element){
  if(element.id == "celsius")
  {
    if(current_unit == "fahrenheit")
    {
      temp_before = parseFloat(($("h1#temperature").text()).split("°")[0]);
      temp_after = (temp_before - 32) * 5/9;
      var newtext = "".concat(temp_after.toFixed(2),"°");
      document.getElementById("temperature").innerHTML = newtext;
      $("#".concat(element.id)).attr("onclick","");
      $("#fahrenheit").attr("onclick","unitsTemperature(this)");
      $("#spanC").css("font-weight","bold");
      $("#spanF").css("font-weight","normal");
      current_unit = "celsius";
    }
  }
  else if (element.id == "fahrenheit")
  {
    if(current_unit == "celsius")
    {
      temp_before = parseFloat(($("h1#temperature").text()).split("°")[0]);
      temp_after = temp_before*9/5 + 32;
      var newtext = "".concat(temp_after.toFixed(2),"°");
      document.getElementById("temperature").innerHTML = newtext;
      $("#".concat(element.id)).attr("onclick","");
      $("#celsius").attr("onclick","unitsTemperature(this)");
      $("#spanC").css("font-weight","normal");
      $("#spanF").css("font-weight","bold");
      current_unit = "fahrenheit";
    }
  }
  else
  {
    return;
  }
}
</script>
<!--/Temperature Units Change -->

<!-- Skycons -->
<script>
  $(document).ready(function() {
    var icons = new Skycons({
        "color": "#73879C"
      }),
      list = [
        "clear-day", "clear-night", "partly-cloudy-day",
        "partly-cloudy-night", "cloudy", "rain", "sleet", "snow", "wind",
        "fog"
      ],
      i;
    for (i = list.length; i--;)
      icons.set(list[i], list[i]);
    icons.play();
  });
</script>
<!-- /Skycons -->

<!-- Responsive size of panels -->
<script>
  $(document).ready(function() {
    var map_height = parseFloat($("div#panel_map").css("height"));
    var electrical_height = parseFloat($("div#panel_electrical").css("height"));
    if (electrical_height>map_height){
      $("div#panel_map").css("height",electrical_height);
    }
    else
    {
      $("div#panel_electrical").css("height",map_height);
    }
  });
</script>
<!-- /Responsive size of panels -->

<!-- Control panel-->
<script>
  var changeCheckbox1 = document.querySelector('#xantrex');
  changeCheckbox1.onclick = function() {
    uploadcont("inv_xantrex");
  };

  var changeCheckbox2 = document.querySelector('#batt1');
  changeCheckbox2.onclick = function() {
    uploadcont("batt1");
  };

  var changeCheckbox3 = document.querySelector('#batt2');
  changeCheckbox3.onclick = function() {
    uploadcont("batt2");
  };

  </script>
<!-- /Control panel-->

<!-- /Wind Turbine -->
<script>
  $(document).ready(function() {
    var speed_chart = function (data) {
      time = data.timestamp;
      y_data = data.y_data;
      var lineData = {
        labels: time,
        datasets: [{
          label: 'Speed',
          backgroundColor: "rgba(3, 88, 106, 0.2)",
          borderColor: "rgba(3, 88, 106, 0.80)",
          pointBorderColor: "rgba(3, 88, 106, 0.80)",
          pointBackgroundColor: "rgba(3, 88, 106, 0.80)",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointBorderWidth: 1,
          pointRadius: 2,
          cubicInterpolationMode: 'default',
          lineTension: 0,
          data: y_data
        }]
      };
      var ctx = document.getElementById("speedChart").getContext('2d');
      var lineChart = new Chart(ctx, {
        type: 'line',
        data: lineData,
        options: {
          scales: {
            xAxes: [{
              type: 'time',
              time: {
                unit: 'hour',
                displayFormats: {
                  hour: 'HH:mm'
                },
                unitStepSize: 4,
                min: (moment().subtract(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00"),
                max: (moment().add(1, 'days').format("YYYY-MM-DD")).concat(" 00:00:00")
              },
              scaleLabel: {
                display: true,
                labelString: 'Time'
              }
            }],
            yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Speed [rpm]'
              }
            }]
          },
          pan: {
            enabled: true,
            mode: 'xy'
          },
          zoom: {
            enabled: true,
            mode: 'xy',
            limits: {
              max: 10,
              min: 0.5
            }
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: false
          }
        }
      });
    }
    var wind_chart = function (data) {
      labels = data.labels;
      var ctx = document.getElementById("windChart").getContext('2d');
      var source = {
        labels: labels,
        datasets: [{
          label: data[2].date,
          backgroundColor: "rgba(3, 88, 106, 0.2)",
          borderColor: "rgba(3, 88, 106, 0.80)",
          pointBorderColor: "rgba(3, 88, 106, 0.80)",
          pointBackgroundColor: "rgba(3, 88, 106, 0.80)",
          pointHoverBackgroundColor: "#fff",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          data: Object.values(data[2].result)
        },
        {
          label: data[1].date,
          backgroundColor: "rgba(38, 15, 154, 0.2)",
          borderColor: "rgba(38, 15, 154, 0.85)",
          pointColor: "rgba(38, 15, 154, 0.85)",
          pointStrokeColor: "#fff",
          pointHighlightFill: "#fff",
          pointHighlightStroke: "rgba(151,17,205,1)",
          data: Object.values(data[1].result)
        },
        {
          label: data[0].date,
          backgroundColor: "rgba(38, 155, 154, 0.2)",
          borderColor: "rgba(38, 155, 154, 0.85)",
          pointColor: "rgba(38, 155, 154, 0.85)",
          pointStrokeColor: "#fff",
          pointHighlightFill: "#fff",
          pointHighlightStroke: "rgba(151,187,205,1)",
          data: Object.values(data[0].result)
        }]
      };
      var canvasRadar = new Chart(ctx, {
        type: 'radar',
        data: source,
        option: {
          legend: {
            display: true
          },
          responsive: true,
          maintainAspectRatio: false
        }
      });
    }

    var hsp_chart = function (data) {
      labels = data.labels;
      values = data.values;
      var ctx = document.getElementById("hspChart").getContext('2d');

      var format_data = {
        labels: labels,
        datasets: [{
          label: 'HSP',
          backgroundColor: "#249FB4",
          data: values
        }]
      };

      var barChartSol = new Chart(ctx, {
        type: 'bar',
        data: format_data,
        options: {
          tooltips: {
            mode: 'label'
          },
          scales: {
            xAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'Days'
              }
            }],
            yAxes: [{
              stacked: true,
              scaleLabel: {
                display: true,
                labelString: 'HSP [kWh/m\xB2/d]'
              }
          }]
          },
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: false
          }
        }
      });
    }

    ajax_call("json", "rpm", '<%= speed_chart_path %>', speed_chart, false);
    ajax_call("json", "wind_med1", '<%= wind_chart_path %>', wind_chart, false);
    ajax_call("json", "hsp", '<%= hsp_chart_path %>', hsp_chart, false);
  });
</script>
<!-- /Wind Turbine -->

<!--AJAX Refresh -->
<script>
  function ShowWeather() {
    var load_metereological = function (data) {
      variable = data.variable;
      result = data.result;
      if (variable == "timestamp"){
        document.getElementById("subtitle_weather_report").innerHTML = result;
      }else{
        if (variable == "temperature"){
          if ($("#spanF").css("font-weight")  == 'bold' || $("#spanF").css("font-weight")  == '700'){
            result = result*9/5 + 32;
            result = Math.round(result*100)/100;
          }
          result = result + '°';
        }
        document.getElementById(variable).innerHTML = result;
      }
    }
    variable_list = ["temperature","uv_index", "solar_radiation", "humidity", "wind_speed"];
    variable_list.forEach(function(item){
      ajax_call("json", item, '<%= load_metereological_path %>', load_metereological, false);
    });
    ajax_call("json", "timestamp", '<%= load_metereological_path %>', load_metereological, false);
  }

  function ShowElectrical() {
    function battery_load(voltage){
      voltage = parseFloat(voltage);
      if (voltage<9) {
        return parseInt(0);
      }else if (voltage>= 9 && voltage<15){
        return parseInt((voltage-9)*100/(15-9));
      }else if (voltage>=15){
        return parseInt(100);
      }
    }
    var load_electrical = function (data) {
      variable = data.variable;
      result = data.result;
      if (variable.includes("voltage_batt")) {
        $("#".concat(variable).concat(".progress-bar")).css("width", battery_load(result) + "%");
        document.getElementById(variable).innerHTML = result;
        //auto_loadcont(variable,parseInt(result));
      } else if (variable == "energy_med1") {
        gauge.maxValue = parseFloat(2);
        gauge.set(parseFloat(result));
        document.getElementById("goal-text").innerHTML = 2;
      }else if (variable == "total_delivered_energy"){
        timestamp = data.timestamp;
        document.getElementById(variable).innerHTML = parseFloat(result).toFixed(1) + result.split(" ")[1];
        document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
      }else if (variable == "timestamp" ){
        document.getElementById("subtitle_electrical_variables").innerHTML = result;
      } else {
        document.getElementById(variable).innerHTML = result;
      }
    }
    ajax_call("json", "voltage_med1", '<%= load_electrical_path %>', load_electrical, true);
    ajax_call("json", "power_med1", '<%= load_electrical_path %>', load_electrical, true);
    ajax_call("json", "pf_med1", '<%= load_electrical_path %>', load_electrical, true);
    ajax_call("json", "energy_med1", '<%= load_electrical_path %>', load_electrical, false);
    ajax_call("json", "voltage_batt1", '<%= load_electrical_path %>', load_electrical, true);
    ajax_call("json", "voltage_batt2", '<%= load_electrical_path %>', load_electrical, true);
    ajax_call("json", "total_delivered_energy", '<%= load_electrical_path %>', load_electrical, true);
    ajax_call("json", "timestamp", '<%= load_electrical_path %>', load_electrical, false);
  }

  function ShowInternal() {
    var load_internal = function (data) {
      variable = data.variable;
      result = data.result;
      timestamp = data.timestamp;
      document.getElementById(variable).innerHTML = result;
      document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
    }
    ajax_call("json", "temperature_int", '<%= load_internal_path %>', load_internal, true);
    ajax_call("json", "humidity_int", '<%= load_internal_path %>', load_internal, true);
    ajax_call("json", "last_update", '<%= load_internal_path %>', load_internal, false);
  }
  
  function ShowPanel() {
    var load_panel = function (data) {
      variable = data.variable;
      result = data.result;
      timestamp = data.timestamp;
      document.getElementById(variable).innerHTML = result;
      //document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
    }
    ajax_call("json", "temp_panel", '<%= load_panel_path %>', load_panel, true);
    ajax_call("json", "temp_ext", '<%= load_panel_path %>', load_panel, true);
    ajax_call("json", "radiation", '<%= load_panel_path %>', load_panel, true);
  }

  //function ShowStream() {
    //var refresh_image = function (data) {
      //url = data.url;
      //timestamp = data.timestamp;
      //document.getElementById("stream").src = url;
      //document.getElementById("subtitle_live_stream").innerHTML = timestamp;
   // }
    //ajax_call("json", "url", '<%= load_stream_path %>', refresh_image, true );
  //}

  function ShowSpeed() {
    var load_speed = function (data) {
      variable = data.variable;
      result = data.result;
      timestamp = data.timestamp;
      if (variable == "rpm") {
        gaugespeed.maxValue = parseFloat(410);
        gaugespeed.set(parseFloat(result));
        document.getElementById("goal-text-speed").innerHTML = 410;
        document.getElementById("gauge-text-speed").innerHTML = 0;
      }else if (variable == "timestamp" ){
        document.getElementById("subtitle_wind_turbine_speed").innerHTML = result;
      } else {
        document.getElementById(variable).innerHTML = result;
        document.getElementById(variable.concat("_timestamp")).innerHTML = timestamp;
      }
    }
    ajax_call("json", "rpm", '<%= load_speed_path %>', load_speed, true);
    ajax_call("json", "timestamp", '<%= load_speed_path %>', load_speed, false);
  }

  $(document).ready(function() {
    var opts = {
        lines: 12,
        angle: 0,
        lineWidth: 0.4,
        pointer: {
            length: 0.75,
            strokeWidth: 0.042,
            color: '#1D212A'
        },
        limitMax: 'false',
        colorStart: '#1ABC9C',
        colorStop: '#1ABC9C',
        strokeColor: '#F0F3F3',
        generateGradient: true
    };
    var target = document.getElementById('gauge');
    gauge = new Gauge(target).setOptions(opts);
    document.getElementById("gauge").removeAttribute("style");
    gauge.animationSpeed = 32;
    gauge.setTextField(document.getElementById("gauge-text"));
    $('#gauge').css("width", "100%");
    ShowWeather();
    ShowElectrical();
    ShowInternal();
    ShowPanel();
    setInterval(function() {
        ShowWeather();
        ShowElectrical();
        ShowInternal();
        ShowPanel();
    }, 60000);
    setInterval(function() {
        //ShowStream();
    }, 400);

    var optspeed = {
        lines: 12,
        angle: 0,
        lineWidth: 0.4,
        pointer: {
            length: 0.75,
            strokeWidth: 0.042,
            color: '#1D212A'
        },
        percentColors : [
          [ 0.0, "#7FC06D" ],
          [ 0.50, "#F1D04D" ],
          [ 1.0, "#D12727" ]
        ],
        limitMax: 'false',
        colorStart: 'rgba(3, 20, 106, 0.20)',
        colorStop: 'rgba(3, 88, 106, 0.80)',
        strokeColor: '#F0F3F3',
        generateGradient: true

    };
    var target = document.getElementById('gaugespeed');
    gaugespeed = new Gauge(target).setOptions(optspeed);
    document.getElementById("gaugespeed").removeAttribute("style");
    gaugespeed.animationSpeed = 32;
    gaugespeed.setTextField(document.getElementById("gauge-actual-speed"));
    $('#gauge').css("width", "100%");
    ShowSpeed();
    setInterval(function() {
      ShowSpeed();
    }, 60000);
  });
</script>
<!--/AJAX Refresh -->
<%
=end %>

<% end %>
<%= render @page %>
